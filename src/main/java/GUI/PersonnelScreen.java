/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import advertisement.abstracts.House;
import advertisement.concretes.Advertisement;
import advertisement.concretes.Apartment;
import core.concretes.Block;
import java.awt.Dimension;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import user.concretes.Person;
import user.concretes.Personnel;

/**
 *
 * @author EmreOzkaya
 */
public class PersonnelScreen extends javax.swing.JFrame {

    /**
     * Creates new form Home2
     */
    static boolean isLogin = false;
    private static Person person;
    private static Personnel personnel;
    static boolean profileMenuOpen = false;
    Connection db = Singleton.SingletonConnection.getCon();
    PreparedStatement pst;
    Statement st;
    ResultSet rs;
    private boolean isAdvertisementsListed = false;
    private boolean isInactivePersonListed = false;
    private boolean isBlockedPersonsListed = false;

    public PersonnelScreen() {
        initComponents();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        this.isLogin = isLogin;

    }

    public PersonnelScreen(Personnel personnel) {
        initComponents();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        this.personnel = personnel;
        this.isLogin = isLogin;
        profileMenu.setText(personnel.getName().toUpperCase());
        getAdvertisementDatas();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        profileDetail = new javax.swing.JPanel();
        homePage = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        inactivePersonScrool = new javax.swing.JScrollPane();
        inactivePersonsList = new javax.swing.JTable();
        blockedPeronScool = new javax.swing.JScrollPane();
        blockedPersonsList = new javax.swing.JTable();
        content = new javax.swing.JPanel();
        personnelScreen = new javax.swing.JPanel();
        navbar1 = new javax.swing.JPanel();
        profileMenu = new javax.swing.JButton();
        inactiveAdvertisements = new javax.swing.JButton();
        inactivePersons = new javax.swing.JButton();
        blockedPersons = new javax.swing.JButton();
        inactiveAdvertisementsScrool = new javax.swing.JScrollPane();
        inactiveAdvertisementsList = new javax.swing.JTable();

        profileDetail.setBackground(new java.awt.Color(51, 51, 51));
        profileDetail.setMinimumSize(new java.awt.Dimension(100, 124));
        profileDetail.setPreferredSize(new java.awt.Dimension(100, 124));

        homePage.setBackground(new java.awt.Color(51, 51, 51));
        homePage.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        homePage.setForeground(new java.awt.Color(255, 255, 255));
        homePage.setText("Home");
        homePage.setBorder(null);
        homePage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homePage.setDefaultCapable(false);
        homePage.setPreferredSize(new java.awt.Dimension(100, 40));
        homePage.setRequestFocusEnabled(false);
        homePage.setVerifyInputWhenFocusTarget(false);
        homePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homePageActionPerformed(evt);
            }
        });

        exit.setBackground(new java.awt.Color(51, 51, 51));
        exit.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("Exit");
        exit.setBorder(null);
        exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit.setDefaultCapable(false);
        exit.setPreferredSize(new java.awt.Dimension(100, 40));
        exit.setRequestFocusEnabled(false);
        exit.setVerifyInputWhenFocusTarget(false);
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout profileDetailLayout = new javax.swing.GroupLayout(profileDetail);
        profileDetail.setLayout(profileDetailLayout);
        profileDetailLayout.setHorizontalGroup(
            profileDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profileDetailLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(profileDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(homePage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(214, 214, 214))
        );
        profileDetailLayout.setVerticalGroup(
            profileDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileDetailLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(homePage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        profileDetail.getAccessibleContext().setAccessibleName("");

        inactivePersonScrool.setPreferredSize(new java.awt.Dimension(1320, 406));

        inactivePersonsList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        inactivePersonsList.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        inactivePersonsList.setRowHeight(50);
        inactivePersonsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Id", "Name", "Surname", "Email", "Identity Number", "Birth Date", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inactivePersonsList.getTableHeader().setReorderingAllowed(false);
        inactivePersonsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inactivePersonsListMouseClicked(evt);
            }
        });
        inactivePersonScrool.setViewportView(inactivePersonsList);
        if (inactivePersonsList.getColumnModel().getColumnCount() > 0) {
            inactivePersonsList.getColumnModel().getColumn(0).setResizable(false);
            inactivePersonsList.getColumnModel().getColumn(1).setResizable(false);
            inactivePersonsList.getColumnModel().getColumn(2).setResizable(false);
            inactivePersonsList.getColumnModel().getColumn(3).setResizable(false);
            inactivePersonsList.getColumnModel().getColumn(4).setResizable(false);
            inactivePersonsList.getColumnModel().getColumn(5).setResizable(false);
            inactivePersonsList.getColumnModel().getColumn(6).setResizable(false);
        }

        blockedPeronScool.setPreferredSize(new java.awt.Dimension(1320, 406));

        blockedPersonsList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        blockedPersonsList.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        blockedPersonsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Surname", "Email", "Block Reason", "Block Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blockedPersonsList.getTableHeader().setReorderingAllowed(false);
        blockedPersonsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blockedPersonsListMouseClicked(evt);
            }
        });
        blockedPeronScool.setViewportView(blockedPersonsList);
        if (blockedPersonsList.getColumnModel().getColumnCount() > 0) {
            blockedPersonsList.getColumnModel().getColumn(0).setResizable(false);
            blockedPersonsList.getColumnModel().getColumn(1).setResizable(false);
            blockedPersonsList.getColumnModel().getColumn(2).setResizable(false);
            blockedPersonsList.getColumnModel().getColumn(3).setResizable(false);
            blockedPersonsList.getColumnModel().getColumn(4).setResizable(false);
            blockedPersonsList.getColumnModel().getColumn(5).setResizable(false);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        personnelScreen.setBackground(new java.awt.Color(51, 51, 51));
        personnelScreen.setPreferredSize(new java.awt.Dimension(1380, 800));

        navbar1.setBackground(new java.awt.Color(153, 153, 153));
        navbar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        navbar1.setPreferredSize(new java.awt.Dimension(1320, 60));

        profileMenu.setBackground(new java.awt.Color(51, 51, 51));
        profileMenu.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        profileMenu.setForeground(new java.awt.Color(255, 255, 255));
        profileMenu.setBorder(null);
        profileMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        profileMenu.setDefaultCapable(false);
        profileMenu.setPreferredSize(new java.awt.Dimension(100, 40));
        profileMenu.setRequestFocusEnabled(false);
        profileMenu.setVerifyInputWhenFocusTarget(false);
        profileMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileMenuMouseClicked(evt);
            }
        });
        profileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileMenuActionPerformed(evt);
            }
        });

        inactiveAdvertisements.setBackground(new java.awt.Color(153, 153, 153));
        inactiveAdvertisements.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        inactiveAdvertisements.setForeground(new java.awt.Color(255, 255, 255));
        inactiveAdvertisements.setText("Advertisements");
        inactiveAdvertisements.setBorder(null);
        inactiveAdvertisements.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inactiveAdvertisements.setDefaultCapable(false);
        inactiveAdvertisements.setPreferredSize(new java.awt.Dimension(160, 40));
        inactiveAdvertisements.setRequestFocusEnabled(false);
        inactiveAdvertisements.setVerifyInputWhenFocusTarget(false);
        inactiveAdvertisements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inactiveAdvertisementsActionPerformed(evt);
            }
        });

        inactivePersons.setBackground(new java.awt.Color(153, 153, 153));
        inactivePersons.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        inactivePersons.setForeground(new java.awt.Color(255, 255, 255));
        inactivePersons.setText("Persons");
        inactivePersons.setBorder(null);
        inactivePersons.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inactivePersons.setDefaultCapable(false);
        inactivePersons.setPreferredSize(new java.awt.Dimension(160, 40));
        inactivePersons.setRequestFocusEnabled(false);
        inactivePersons.setVerifyInputWhenFocusTarget(false);
        inactivePersons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inactivePersonsActionPerformed(evt);
            }
        });

        blockedPersons.setBackground(new java.awt.Color(153, 153, 153));
        blockedPersons.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        blockedPersons.setForeground(new java.awt.Color(255, 255, 255));
        blockedPersons.setText("Blocked Persons");
        blockedPersons.setBorder(null);
        blockedPersons.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        blockedPersons.setDefaultCapable(false);
        blockedPersons.setPreferredSize(new java.awt.Dimension(160, 40));
        blockedPersons.setRequestFocusEnabled(false);
        blockedPersons.setVerifyInputWhenFocusTarget(false);
        blockedPersons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockedPersonsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navbar1Layout = new javax.swing.GroupLayout(navbar1);
        navbar1.setLayout(navbar1Layout);
        navbar1Layout.setHorizontalGroup(
            navbar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navbar1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(blockedPersons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(266, 266, 266)
                .addComponent(inactivePersons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 269, Short.MAX_VALUE)
                .addComponent(inactiveAdvertisements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(profileMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        navbar1Layout.setVerticalGroup(
            navbar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbar1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navbar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(navbar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inactiveAdvertisements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inactivePersons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(blockedPersons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(profileMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        inactiveAdvertisementsScrool.setPreferredSize(new java.awt.Dimension(1320, 406));

        inactiveAdvertisementsList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        inactiveAdvertisementsList.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        inactiveAdvertisementsList.setRowHeight(50);
        inactiveAdvertisementsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Heating", "Room Number", "Price", "Address", "Short Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inactiveAdvertisementsList.getTableHeader().setReorderingAllowed(false);
        inactiveAdvertisementsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inactiveAdvertisementsListMouseClicked(evt);
            }
        });
        inactiveAdvertisementsScrool.setViewportView(inactiveAdvertisementsList);
        if (inactiveAdvertisementsList.getColumnModel().getColumnCount() > 0) {
            inactiveAdvertisementsList.getColumnModel().getColumn(0).setResizable(false);
            inactiveAdvertisementsList.getColumnModel().getColumn(1).setResizable(false);
            inactiveAdvertisementsList.getColumnModel().getColumn(2).setResizable(false);
            inactiveAdvertisementsList.getColumnModel().getColumn(3).setResizable(false);
            inactiveAdvertisementsList.getColumnModel().getColumn(4).setResizable(false);
            inactiveAdvertisementsList.getColumnModel().getColumn(5).setResizable(false);
            inactiveAdvertisementsList.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout personnelScreenLayout = new javax.swing.GroupLayout(personnelScreen);
        personnelScreen.setLayout(personnelScreenLayout);
        personnelScreenLayout.setHorizontalGroup(
            personnelScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personnelScreenLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(personnelScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(navbar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inactiveAdvertisementsScrool, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        personnelScreenLayout.setVerticalGroup(
            personnelScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personnelScreenLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(navbar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inactiveAdvertisementsScrool, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1380, Short.MAX_VALUE)
            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contentLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(personnelScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
            .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contentLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(personnelScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homePageActionPerformed
        // TODO add your handling code here:
        this.dispose();
        HomeScreen home = new HomeScreen(personnel);
        home.show();

    }//GEN-LAST:event_homePageActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        HomeScreen home = new HomeScreen();
        home.show();

    }//GEN-LAST:event_exitActionPerformed

    private void profileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profileMenuActionPerformed

    private void profileMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileMenuMouseClicked
        // TODO add your handling code here:
        if (profileMenuOpen) {
            this.profileDetail.hide();
            this.personnelScreen.remove(profileDetail);
            profileMenuOpen = false;
            inactiveAdvertisementsScrool.setVisible(true);

        } else {
            this.personnelScreen.add(profileDetail);
            profileDetail.show();

            profileDetail.setBounds(1211, 90, 100, 120);
            homePage.setBounds(0, 0, 100, 40);
            exit.setBounds(0, 41, 100, 40);
            inactiveAdvertisementsScrool.setVisible(false);
            inactivePersonScrool.setVisible(false);
            blockedPeronScool.setVisible(false);

            profileMenuOpen = true;
        }
    }//GEN-LAST:event_profileMenuMouseClicked

    private void inactiveAdvertisementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inactiveAdvertisementsActionPerformed
        // TODO add your handling code here:

        inactivePersonScrool.hide();
        blockedPeronScool.hide();
        personnelScreen.add(inactiveAdvertisementsScrool);

        inactiveAdvertisementsScrool.show();
        inactiveAdvertisementsScrool.setBounds(32, 100, 1320, 650);
        inactiveAdvertisementsList.setBounds(0, 0, 1320, 650);
        getAdvertisementDatas();

    }//GEN-LAST:event_inactiveAdvertisementsActionPerformed


    private void inactivePersonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inactivePersonsActionPerformed
        inactiveAdvertisementsScrool.hide();
        blockedPeronScool.hide();
        personnelScreen.add(inactivePersonScrool);

        inactivePersonScrool.show();
        inactivePersonScrool.setBounds(32, 100, 1320, 650);
        inactivePersonsList.setBounds(0, 0, 1320, 650);
        getInactivePersonsData();
    }//GEN-LAST:event_inactivePersonsActionPerformed


    private void blockedPersonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockedPersonsActionPerformed
        inactiveAdvertisementsScrool.hide();
        inactivePersonScrool.hide();
        personnelScreen.add(blockedPeronScool);

        blockedPeronScool.show();
        blockedPeronScool.setBounds(32, 100, 1320, 650);
        blockedPersonsList.setBounds(0, 0, 1320, 650);
        getBlockedPersonsData();
    }//GEN-LAST:event_blockedPersonsActionPerformed

    private void getInactivePersonsData() {
        if (!isInactivePersonListed) {
            isAdvertisementsListed = false;
            isBlockedPersonsListed = false;
            isInactivePersonListed = true;
            profileMenuOpen = false;
            this.profileDetail.hide();

            List<Person> personList = personnel.getAllIsActiveFalse();

            DefaultTableModel tblModel = (DefaultTableModel) inactivePersonsList.getModel();
            tblModel.setRowCount(0);

            for (Person personData : personList) {
                Object tbData[] = {personData.getId(), personData.getName(), personData.getSurname(), personData.getEmail(), personData.getIdentityNumber(), personData.getBirthDate(), personData.getGender()};

                tblModel.addRow(tbData);
            }
        }
    }

    private void getAdvertisementDatas() {
        if (!isAdvertisementsListed) {
            isInactivePersonListed = false;
            isBlockedPersonsListed = false;
            isAdvertisementsListed = true;
            profileMenuOpen = false;
            this.profileDetail.hide();
            Advertisement ad = new Advertisement();
            List<Advertisement> advertisementList = ad.getAllAdvertisementsIsActiveFalse();

            DefaultTableModel tblModel = (DefaultTableModel) inactiveAdvertisementsList.getModel();
            tblModel.setRowCount(0);

            for (Advertisement advertisement : advertisementList) {

                Object tbData[] = {advertisement.getId(), advertisement.getAdvertisementName(), advertisement.getAdvertisementType(), advertisement.getHouse().getHeating(), advertisement.getHouse().getRoomNumber(),
                    advertisement.getPrice(), advertisement.getHouse().getLocation(), advertisement.getHouse().getShortDescription()};

                tblModel.addRow(tbData);
            }
        }
    }

    private void getBlockedPersonsData() {
        if (!isBlockedPersonsListed) {
            isBlockedPersonsListed = true;
            isInactivePersonListed = false;
            isAdvertisementsListed = false;
            profileMenuOpen = false;
            this.profileDetail.hide();
            List<Person> personList = personnel.getAllIsBlockTrue();

            DefaultTableModel tblModel = (DefaultTableModel) blockedPersonsList.getModel();
            tblModel.setRowCount(0);

            for (Person personData : personList) {
                try {
                    st = db.createStatement();
                    rs = st.executeQuery(Singleton.SingletonConnection.getBlockedPersonByID + "'" + personData.getId() + "'");
                    while (rs.next()) {

                        Object tbData[] = {personData.getId(), personData.getName(), personData.getSurname(), personData.getEmail(), rs.getString("reason"), rs.getString("block_time")};
                        tblModel.addRow(tbData);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PersonnelScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
    }

    private void inactivePersonsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inactivePersonsListMouseClicked
        // TODO add your handling code here:
        int index = inactivePersonsList.getSelectedRow();
        TableModel model = inactivePersonsList.getModel();
        String id = model.getValueAt(index, 0).toString();
        String updatePersonValidation = "UPDATE persons SET activation_result=true , activation_personnel_id='" + personnel.getPerson_id() + "' WHERE id='" + id + "'";
        String deletePerson = "DELETE FROM persons WHERE id='" + id + "'";

        int result = JOptionPane.showConfirmDialog(null, "Do you want to Validate");
        if (result == 0) {
            try {
                pst = db.prepareStatement(updatePersonValidation);
                pst.execute();
                isInactivePersonListed = false;
                getInactivePersonsData();

            } catch (SQLException ex) {
                Logger.getLogger(PersonnelScreen.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        } else if (result == 1) {
            try {
                pst = db.prepareStatement(deletePerson);
                pst.execute();
                isInactivePersonListed = false;
                getInactivePersonsData();

            } catch (SQLException ex) {
                Logger.getLogger(PersonnelScreen.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_inactivePersonsListMouseClicked

    private void inactiveAdvertisementsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inactiveAdvertisementsListMouseClicked
        // TODO add your handling code here:
        int index = inactiveAdvertisementsList.getSelectedRow();
        TableModel model = inactiveAdvertisementsList.getModel();
        String id = model.getValueAt(index, 0).toString();
        Advertisement ad = new Advertisement();

        int result = JOptionPane.showConfirmDialog(null, "Do you want to Validate");
        if (result == 0) {
            ad.validateAdvertisement(personnel, Integer.parseInt(id));
            isAdvertisementsListed = false;
            getAdvertisementDatas();
        } else if (result == 1) {
            try {
                st = db.createStatement();
                rs = st.executeQuery(Singleton.SingletonConnection.getAdvertisementById + "'" + Integer.parseInt(id) + "'");
                while (rs.next()) {
                    ad.setId(Integer.parseInt(id));
                    Statement st2 ;
                    ResultSet rs2;
                    st2=db.createStatement();
                    rs2=st2.executeQuery(Singleton.SingletonConnection.getHouseById+"'"+rs.getInt("house_id")+"'");
                     
                    while(rs2.next()){
                        House house = new Apartment();
                        house.setId(rs2.getInt("id"));
                        ad.setHouse(house);
                    }
                    ad.delete();
                    isAdvertisementsListed = false;
                    getAdvertisementDatas();
                }

            } catch (SQLException ex) {
                Logger.getLogger(PersonnelScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_inactiveAdvertisementsListMouseClicked

    private void blockedPersonsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockedPersonsListMouseClicked
        int index = blockedPersonsList.getSelectedRow();
        TableModel model = blockedPersonsList.getModel();
        String id = model.getValueAt(index, 0).toString();
        Block block = new Block();
        block.setPersonId(Integer.parseInt(id));

        int result = JOptionPane.showConfirmDialog(null, "Do you want to Remove Block");
        if (result == 0) {
            block.removeBlock();
            isBlockedPersonsListed = false;
            getBlockedPersonsData();
        }
    }//GEN-LAST:event_blockedPersonsListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonnelScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonnelScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonnelScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonnelScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new PersonnelScreen().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane blockedPeronScool;
    private javax.swing.JButton blockedPersons;
    private javax.swing.JTable blockedPersonsList;
    private javax.swing.JPanel content;
    private javax.swing.JButton exit;
    private javax.swing.JButton homePage;
    private javax.swing.JButton inactiveAdvertisements;
    private javax.swing.JTable inactiveAdvertisementsList;
    private javax.swing.JScrollPane inactiveAdvertisementsScrool;
    private javax.swing.JScrollPane inactivePersonScrool;
    private javax.swing.JButton inactivePersons;
    private javax.swing.JTable inactivePersonsList;
    private javax.swing.JPanel navbar1;
    private javax.swing.JPanel personnelScreen;
    private javax.swing.JPanel profileDetail;
    private javax.swing.JButton profileMenu;
    // End of variables declaration//GEN-END:variables
}
